name: Build PHP FPM Container and Upload to Dockerhub

on:
  workflow_call:
    secrets:
      DockerHubUser:
        required: true
      DockerHubPass:
        required: true
      ComposerAuth:
        required: false
      SentryToken:
        required: false
      SentryOrg:
        required: false
    inputs:
      buildLocal:
        required: false
        type: boolean
        default: true
      imageName:
        required: false
        type: string
      dockerFile:
        required: false
        type: string
        default: ./Dockerfile
      targets:
        required: false
        type: string
        # Define array as string because Github does not support arrays here at the moment
        default: "['production']"

jobs:
  main:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ${{ fromJson(inputs.targets) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DockerHubUser }}
          password: ${{ secrets.DockerHubPass }}
      ######################################################
      # Setting up final build tags
      ######################################################
      - name: Prepare Tags
        id: prep
        run: |
          IMAGE=elbgoodsgmbh/${{ inputs.imageName != '' && inputs.imageName || github.event.repository.name }}
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.prep.outputs.image }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}},suffix=-staging,enable=${{ matrix.target == 'staging' && github.event_name == 'release' }}
            type=semver,pattern={{version}},suffix=-test,enable=${{ matrix.target == 'test' && github.event_name == 'release' }}
            type=semver,pattern={{version}},enable=${{ matrix.target == 'production' }}

            type=ref,event=branch
            
            type=edge,branch=$repo.default_branch,enable=${{ matrix.target != 'development' }}
            type=edge,branch=$repo.default_branch,enable=${{ matrix.target == 'production' }}

            type=raw,value=${{ matrix.target }},enable=${{ matrix.target == 'development' || matrix.target == 'test' }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') && matrix.target == 'production' }}

      ######################################################
      # Setup Cache and BuildX
      ######################################################
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: network=host

      - name: Build and push
        id: docker_build
        if: ${{ !(matrix.target == 'development' && github.event_name == 'release') }}
        uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: "type=gha"
          cache-to: "type=gha,mode=max"
          builder: ${{ steps.buildx.outputs.name }}
          file: ${{ inputs.dockerFile }}
          target: ${{ matrix.target }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            COMPOSER_AUTH=${{ secrets.ComposerAuth }}
            SENTRY_AUTH_TOKEN=${{ secrets.SentryToken }}
            CREATED_AT=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  local:
    runs-on: self-hosted
    if: github.ref_name == 'main' && inputs.buildLocal == true
    needs: main
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DockerHubUser }}
          password: ${{ secrets.DockerHubPass }}
      ######################################################
      # Setting up final build tags
      ######################################################
      - name: Prepare Tags
        id: prep
        run: |
          IMAGE=elbgoodsgmbh/${{ inputs.imageName != '' && inputs.imageName || github.event.repository.name }}
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
      ######################################################
      # Setup Cache and BuildX
      ######################################################
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: network=host

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      ######################################################
      # Build!
      ######################################################
      - name: Build and push local
        id: docker_build_local
        uses: docker/build-push-action@v6
        with:
          cache-from: type=registry,ref=user/app:buildcache
          cache-to: type=registry,ref=user/app:buildcache,mode=max
          builder: ${{ steps.buildx.outputs.name }}
          file: ${{ inputs.dockerFile }}
          target: local
          push: true
          tags: ${{ steps.prep.outputs.image }}:local
          platforms: linux/amd64,linux/arm64
          build-args: |
            COMPOSER_AUTH=${{ secrets.ComposerAuth }}

  check-org:
    runs-on: ubuntu-latest
    outputs:
      check-org: ${{ steps.check-org.outputs.defined }}
    steps:
      - id: check-org
        if: ${{ env.SentryOrg != '' }}
        run: echo "defined=true" >> $GITHUB_OUTPUT
        env:
          SentryOrg: ${{ secrets.SentryOrg }}

  publish-sentry:
    runs-on: ubuntu-latest
    needs: [check-org]
    if: ${{ ( github.event_name == 'release' || github.event.action == 'created' ) && needs.check-org.outputs.check-org == 'true' }}
    steps:
    - uses: actions/checkout@v4
      with:
        show-progress: false

    - name: Prepare Project
      id: project
      run: |
        PROJECT=${GITHUB_REPOSITORY#*/}
        echo "project=${PROJECT}" >> $GITHUB_OUTPUT

    - name: Notify Sentry of new Release
      uses: getsentry/action-release@v3
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SentryToken }}
        SENTRY_ORG: ${{ secrets.SentryOrg }}
        SENTRY_PROJECT: ${{ steps.project.outputs.project }}
      with:
        set_commits: skip
        version: ${{ github.ref }}
