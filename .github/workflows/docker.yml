name: Build PHP FPM Container and Upload to Dockerhub

on:
  workflow_call:
    secrets:
      DockerHubUser:
        required: true
      DockerHubPass:
        required: true
      ComposerAuth:
        required: false
      SentryToken:
        required: false
      SentryOrg:
        required: false

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DockerHubUser }}
          password: ${{ secrets.DockerHubPass }}
      ######################################################
      # Setting up final build tags
      ######################################################
      - name: Prepare Tags
        id: prep
        run: |
          IMAGE=elbgoodsgmbh/${GITHUB_REPOSITORY#*/}
          echo ::set-output name=image::${IMAGE}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.prep.outputs.image }}
          flavor: |
            latest=auto
          tags: |
            type=edge,enable=true,branch=main
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
      ######################################################
      # Setup Cache and BuildX
      ######################################################
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      ######################################################
      # Build!
      ######################################################
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          cache-from: "type=gha"
          cache-to: "type=gha,mode=max"
          builder: ${{ steps.buildx.outputs.name }}
          file: ./Dockerfile
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            COMPOSER_AUTH=${{ secrets.ComposerAuth }}

  local:
    runs-on: self-hosted
    if: github.ref_name == 'main'
    needs: main
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DockerHubUser }}
          password: ${{ secrets.DockerHubPass }}
      ######################################################
      # Setting up final build tags
      ######################################################
      - name: Prepare Tags
        id: prep
        run: |
          IMAGE=elbgoodsgmbh/${GITHUB_REPOSITORY#*/}
          echo ::set-output name=image::${IMAGE}
      ######################################################
      # Setup Cache and BuildX
      ######################################################
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
           platforms: arm64

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      ######################################################
      # Build!
      ######################################################
      - name: Build and push local
        id: docker_build_local
        uses: docker/build-push-action@v6
        with:
          cache-from: "type=gha"
          cache-to: "type=gha,mode=max"
          builder: ${{ steps.buildx.outputs.name }}
          file: ./Dockerfile
          target: local
          push: true
          tags: ${{ steps.prep.outputs.image }}:local
          platforms: linux/amd64,linux/arm64
          build-args: |
            COMPOSER_AUTH=${{ secrets.ComposerAuth }}

  check-org:
      runs-on: ubuntu-latest
      outputs:
        check-org: ${{ steps.check-org.outputs.defined }}
      steps:
          - id: check-org
            if: "${{ env.SentryOrg != '' }}"
            run: echo "::set-output name=defined::true"
            env:
              SentryOrg: ${{ secrets.SentryOrg }}

  publish-sentry:
    runs-on: ubuntu-latest
    needs: [check-org]
    if: ${{ ( github.event_name == 'release' || github.event.action == 'created' ) && needs.check-org.outputs.check-org == 'true' }}
    steps:
    - uses: actions/checkout@v4

    - name: Prepare Project
      id: project
      run: |
        PROJECT=${GITHUB_REPOSITORY#*/}
        echo ::set-output name=project::${PROJECT}

    - name: Notify Sentry of new Release
      uses: getsentry/action-release@v3
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SentryToken }}
        SENTRY_ORG: ${{ secrets.SentryOrg }}
        SENTRY_PROJECT: ${{ steps.project.outputs.project }}
      with:
        set_commits: skip
        version: ${{ github.ref }}
